package com.example.demo;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.example.demo.config.EmployeeDetailService;
import com.mysql.cj.protocol.AuthenticationProvider;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		
		http.csrf(csrf -> csrf.disable())
		.authorizeHttpRequests(auth -> auth.requestMatchers("/app/welcom", "/app/add").permitAll()
				.anyRequest().authenticated()
				
				)
		.formLogin(Customizer.withDefaults());
		
		return http.build();
		
	}
	
	
	
	public UserDetailsService userDetailsService(PasswordEncoder encoder) {
		
//		UserDetails admin=User.withUsername("admin")
//				.password(encoder.encode("123")).roles("ADMIN").build();
//				
//		UserDetails user=User.withUsername("rupesh")
//				.password(encoder.encode("123")).roles("USER").build();
//		
//		return new InMemoryUserDetailsManager(admin,user);
		
		
		return new EmployeeDetailService();
		
	}
	
	@Bean
	public AuthenticationProvider   authenticationProvider() {
		   
		  DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
		  
		   authenticationProvider.setUserDetailsService(userDetailsService()););
		   authenticationProvider.setPasswordEncoder(encoder());
		   return authenticationProvider;
	}
	
	
	@Bean
	public PasswordEncoder encoder() {
		return new BCryptPasswordEncoder();
	}
	
	
	
	
	
}
